{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Demo application template",
	
	"Outputs": {
		"DatabaseProperties": {
			"Value": {
				"Fn::Join": [" ; ", [{"Ref": "RDSDatabase"}, {"Fn::GetAtt": ["RDSDatabase","Endpoint.Address"]}, {"Fn::GetAtt": ["RDSDatabase","Endpoint.Port"]}]]
			},
			"Description": "Properties associated with the RDS database instance"
		}
	},
	
	"Metadata" : {
		"AWS::CloudFormation::Interface" : {
			"ParameterGroups" : [
				{
					"Label" : { "default": "Database Configuration" },
					"Parameters" : [ "DatabaseName", "DatabaseUserName", "DatabasePassword" ]
				},
				{
					"Label" : { "default" : "Network Configuration" },
					"Parameters" : [ "AvailabilityZone1", "AvailabilityZone2" ]
				},
				{
					"Label" : { "default" : "EC2 Configuration" },
					"Parameters" : [ "KeyName" ]
				},
				{
					"Label" : { "default" : "Amazon MQ Configuration" },
					"Parameters" : [ "BrokerName", "AmazonMqUsername", "AmazonMqPassword", "BucketName", "Destination" ]
				}
			],
			"ParameterLabels" : {
				"AvailabilityZone1" : { "default" : "Availability Zone 1" },
				"AvailabilityZone2" : { "default" : "Availability Zone 2" },
				"DatabasePassword" : { "default" : "Database Password" },
				"DatabaseName" : { "default" : "Database Name" },
				"DatabaseUserName" : { "default" : "Database User Name" },
				"KeyName" : { "default" : "Key Name" },
				"AmazonMqUsername" : { "default" : "Amazon Mq Username" },
				"AmazonMqPassword" : { "default" : "Amazon Mq Password" },
				"BucketName" : { "default" : "Bucket Name" },
				"BrokerName" : { "default" : "Broker Name" }
			}
		}
	},
	
	"Parameters": {
		"AvailabilityZone1": {
			"Description": "Select Availability Zone 1",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"AvailabilityZone2": {
			"Description": "Select Availability Zone 2",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"DatabasePassword": {
			"NoEcho": "true",
			"ConstraintDescription": "must contain only alphanumeric characters",
			"Type": "String",
			"Description": "The master password for the DB instance.",
			"Default": "exampleexample"
		},
		"DatabaseName": {
			"ConstraintDescription": "must contain only alphanumeric characters",
			"Type": "String",
			"Description": "The DB Name of the RDS instance",
			"Default": "demo"
		},
		"DatabaseUserName": {
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters",
			"Type": "String",
			"Description": "The name of master user for the client DB Instance.",
			"Default": "postgres"
		},
		"KeyName" : {
		  "Description" : "EC2 Instance SSH Key",
		  "Type" : "AWS::EC2::KeyPair::KeyName"
		},
		"AmazonMqUsername" : {
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters",
			"Type": "String",
			"Description": "The name of master user for the Amazon MQ.",
			"Default": "activemq"
		},
		"AmazonMqPassword": {
			"NoEcho": "true",
			"ConstraintDescription": "must contain only alphanumeric characters",
			"Type": "String",
			"Description": "The master password for the Amazon MQ.",
			"Default": "exampleexample"
		},
		"BucketName": {
			"ConstraintDescription": "must contain only alphanumeric characters",
			"Type": "String",
			"Description": "The Bucket Name for Active MQ storage",
			"Default": "activemq-demo-bucket"
		},
		"Destination": {
			"ConstraintDescription": "must contain only alphanumeric characters",
			"Type": "String",
			"Description": "The Queue Name for messages",
			"Default": "files"
		},
		"BrokerName": {
			"ConstraintDescription": "must contain only alphanumeric characters",
			"Type": "String",
			"Description": "The Active MQ broker name",
			"Default": "ActiveMqBroker"
		}
	},
	
	"Resources": {
		"DBSecurityGroup": {
			"Properties": {
				"GroupDescription": "Enable access to database",
				"SecurityGroupIngress" : [{
					 "CidrIp" : {"Fn::GetAtt": ["CustomVPC","CidrBlock"]},
					 "IpProtocol": "-1"
				  }],
				"VpcId": {"Ref": "CustomVPC"}
			},
			"Type": "AWS::EC2::SecurityGroup"
		},
		
		"DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "description",
                "SubnetIds": [{"Ref": "CustomPublicSubnet"}, {"Ref": "CustomPublicSubnet2"}]
            }
        },
		
		"EC2SecurityGroup": {
			"Properties": {
				"GroupDescription": "Enable access to EC2",
				"SecurityGroupIngress" : [{
					 "IpProtocol" : "tcp",
					 "FromPort" : 22,
					 "ToPort" : 22,
					 "CidrIp" : "0.0.0.0/0"
				  },{
					 "IpProtocol" : "tcp",
					 "FromPort" : 80,
					 "ToPort" : 80,
					 "CidrIp" : {"Fn::GetAtt": ["CustomVPC","CidrBlock"]}
				  }],
				"VpcId": {
					"Ref": "CustomVPC"
				}
			},
			"Type": "AWS::EC2::SecurityGroup"
		},
		
		"MqSecurityGroup": {
			"Properties": {
				"GroupDescription": "Enable access to Mq",
				"SecurityGroupIngress" : [{
					 "IpProtocol" : "tcp",
					 "FromPort" : 0,
					 "ToPort" : 65535,
					 "CidrIp" : {"Fn::GetAtt": ["CustomVPC","CidrBlock"]}
				  }],
				"VpcId": {
					"Ref": "CustomVPC"
				}
			},
			"Type": "AWS::EC2::SecurityGroup"
		},
		
		"EC2InboundRule": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
				"GroupId": {"Fn::GetAtt": ["EC2SecurityGroup", "GroupId"]},
                "SourceSecurityGroupId": {"Fn::GetAtt": ["LoadBalancerSecurityGroup","GroupId"]}
            }
        },
		
		"LoadBalancerSecurityGroup": {
			"Properties": {
				"GroupDescription": "Enable access to Load Balancer",
				"SecurityGroupIngress" : [{
					 "IpProtocol" : "tcp",
					 "FromPort" : 80,
					 "ToPort" : 80,
					 "CidrIp" : "0.0.0.0/0"
				  }],
				"VpcId": {
					"Ref": "CustomVPC"
				}
			},
			"Type": "AWS::EC2::SecurityGroup"
		},
		
		"LoadBalancerOutboundRule": {
		   "Type": "AWS::EC2::SecurityGroupEgress",
		   "Properties":{
			  "IpProtocol": "tcp",
			  "FromPort": 80,
			  "ToPort": 80,
			  "GroupId": {"Fn::GetAtt": ["LoadBalancerSecurityGroup","GroupId"]},
			  "DestinationSecurityGroupId": {"Fn::GetAtt": ["EC2SecurityGroup","GroupId"]}
		   }
		},
		
		"RDSDatabase": {
			"Type": "AWS::RDS::DBInstance",
			"DeletionPolicy": "Delete",
			"Properties": {
				"AvailabilityZone": {
					"Ref": "AvailabilityZone1"
				},
				"MasterUserPassword": {
					"Ref": "DatabasePassword"
				},
				"LicenseModel": "postgresql-license",
				"DBInstanceClass": "db.t2.micro",
				"VPCSecurityGroups": [{
					"Ref": "DBSecurityGroup"
				}],
				"MasterUsername": {
					"Ref": "DatabaseUserName"
				},
				"DBName": {
					"Ref": "DatabaseName"
				},
				"MultiAZ": false,
				"DBSubnetGroupName" : {"Ref" : "DBSubnetGroup"},
				"Engine": "postgres",
				"AllocatedStorage": 5,
				"PubliclyAccessible": "false"
			}
		},
		
		"LaunchTemplate":{
		  "Type":"AWS::EC2::LaunchTemplate",
		  "Properties":{
			"LaunchTemplateName":"LaunchTemplate",
			"LaunchTemplateData":{
			  "IamInstanceProfile":{
				"Arn":{"Fn::GetAtt": ["EC2IamInstanceProfile", "Arn"]}
			  },
			  "DisableApiTermination":"false",
			  "ImageId":"ami-013fffc873b1eaa1c",
			  "InstanceType":"t2.micro",
			  "KeyName":{
					"Ref" : "KeyName"
			  },
			  "SecurityGroupIds":[
				  {
					"Ref" : "EC2SecurityGroup"
				  }
			  ],
			  "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
				 "#!/bin/bash -xe\n",
				 
				 "yum update -y\n",
				 "yum install -y awslogs\n",
				 "sed -i 's/us-east-1/", { "Ref" : "AWS::Region" },"/g' /etc/awslogs/awscli.conf\n",
				 "sed -i 's+/var/log/messages+/home/ec2-user/logs/spring-boot-logging.log+g' /etc/awslogs/awslogs.conf\n",
				 "systemctl start awslogsd\n",
				 "systemctl enable awslogsd.service\n",
				 
				 "aws s3 cp s3://springboot-demo-bucket/demo-0.0.1-SNAPSHOT.jar /home/ec2-user/demo-0.0.1-SNAPSHOT.jar\n",
				 "yum -y install java-11-amazon-corretto-headless\n",
				 "echo 'spring.datasource.url=jdbc:postgresql://", {"Fn::GetAtt": ["RDSDatabase", "Endpoint.Address"]}, ":", {"Fn::GetAtt": ["RDSDatabase", "Endpoint.Port"]}, "/postgres\n",
				 "spring.datasource.username=", {"Ref": "DatabaseUserName"}, "\n",
				 "spring.datasource.password=", {"Ref": "DatabasePassword"}, "\n\n", 
				 "spring.activemq.broker-url=", { "Fn::Select" : [ 0, {"Fn::GetAtt": ["ActiveMqBroker", "OpenWireEndpoints"]}] }, "\n", 
				 "spring.activemq.user=", {"Ref": "AmazonMqUsername"}, "\n",
				 "spring.activemq.password=", {"Ref": "AmazonMqPassword"}, "\n",
				 "bucketname=", {"Ref": "BucketName"}, "\n",
				 "destination=", {"Ref": "Destination"}, "\n' >> /home/ec2-user/application.properties\n",
				 
				 "sed -i 's+touch /var/lock/subsys/local+",
				 "java -jar /home/ec2-user/demo-0.0.1-SNAPSHOT.jar --spring.config.additional-location=/home/ec2-user/application.properties --logging.file.name=/home/ec2-user/logs/spring-boot-logging.log",
				 "+g' /etc/rc.d/rc.local\n",
				 "echo '\nexit 0\n' >> /etc/rc.d/rc.local\n",
				 "chmod +x /etc/rc.d/rc.local\n",
				 "systemctl start rc-local.service"
				 
			   ]]}}
			}
		  }
		},
		
		"AutoScalingGroup": {
		  "Type":"AWS::AutoScaling::AutoScalingGroup",
		  "Properties": {
			"MinSize":"1",
			"MaxSize":"2",
			"DesiredCapacity":"1",
			"HealthCheckGracePeriod":10,
			"AvailabilityZones" : [{"Ref": "AvailabilityZone1" }],
			"TargetGroupARNs" : [{ "Ref" : "DefaultTargetGroup" }],
			"LaunchTemplate": {
			  "LaunchTemplateId": {"Ref":"LaunchTemplate"},
			  "Version":{ "Fn::GetAtt" : [ "LaunchTemplate", "LatestVersionNumber" ] }
			},
			"VPCZoneIdentifier":[{"Ref":"CustomPublicSubnet"}]
		  }
		},
		
		"ScaleOutPolicy" : {
		   "Type" : "AWS::AutoScaling::ScalingPolicy",
		   "Properties" : {
			  "AdjustmentType" : "ChangeInCapacity",
			  "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
			  "ScalingAdjustment" : "1"
		   }
		},
		
		"ScaleDownPolicy" : {
		   "Type" : "AWS::AutoScaling::ScalingPolicy",
		   "Properties" : {
			  "AdjustmentType" : "ChangeInCapacity",
			  "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
			  "ScalingAdjustment" : "-1"
		   }
		},
		
		"AlarmHigh" : {
		   "Type" : "AWS::CloudWatch::Alarm",
		   "Properties" : {
			  "EvaluationPeriods" : "1",
			  "Statistic" : "Sum",
			  "Threshold" : "10",
			  "AlarmDescription" : "Alarm if message quantity is greater than 10",
			  "Period" : "60",
			  "AlarmActions" : [ { "Ref" : "ScaleOutPolicy" } ],
			  "Namespace" : "AWS/AmazonMQ",
			  "Dimensions" : [ {
				 "Name" : "Broker",
				 "Value" : {"Fn::Join" : ["", [{ "Ref" : "BrokerName" }, "-1"]]}
			  },
			  {
				 "Name" : "Queue",
				 "Value" : {"Ref": "Destination"}
			  }],
			  "ComparisonOperator" : "GreaterThanThreshold",
			  "MetricName" : "QueueSize"
		   }
		},
		
		"AlarmLow" : {
		   "Type" : "AWS::CloudWatch::Alarm",
		   "Properties" : {
			  "EvaluationPeriods" : "1",
			  "Statistic" : "Sum",
			  "Threshold" : "3",
			  "AlarmDescription" : "Alarm if message quantity is less than 5",
			  "Period" : "60",
			  "AlarmActions" : [ { "Ref" : "ScaleDownPolicy" } ],
			  "Namespace" : "AWS/AmazonMQ",
			  "Dimensions" : [ {
				 "Name" : "Broker",
				 "Value" : {"Fn::Join" : ["", [{ "Ref" : "BrokerName" }, "-1"]]}
			  },
			  {
				 "Name" : "Queue",
				 "Value" : {"Ref": "Destination"}
			  }],
			  "ComparisonOperator" : "LessThanThreshold",
			  "MetricName" : "QueueSize"
		   }
		},
		
		"LoadBalancer" : {
		  "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
		  "Properties" : {
			"Type" : "application",
			"Subnets" : [{"Ref": "CustomPublicSubnet"}, {"Ref": "CustomPublicSubnet2"}],
			"SecurityGroups":[
				  {"Ref" : "LoadBalancerSecurityGroup"}
			],
			"Scheme" : "internet-facing"
		  }
		},
		
		"LoadBalancerListener" : {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"LoadBalancerArn" : {"Ref" : "LoadBalancer"},
				"Port" : "80",
				"Protocol" : "HTTP",
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn" : {"Ref" : "DefaultTargetGroup"}
                }]
			}
		},
		
		"DefaultTargetGroup" : {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"Name" : "DefaultTargetGroup",
				"VpcId" : {"Ref": "CustomVPC"},
				"Port" : "80",
				"Protocol" : "HTTP",
				"HealthCheckIntervalSeconds" : "10",
				"HealthCheckPath" : "/document/1",
				"HealthCheckTimeoutSeconds" : "4",
				"UnhealthyThresholdCount" : "2",
				"TargetType" : "instance",
				"HealthyThresholdCount" : "4",
				"HealthCheckEnabled" : "true",
				"HealthCheckPort" : "traffic-port",
				"HealthCheckProtocol" : "HTTP",
				"Matcher" : { "HttpCode" : "200" }
			}
		},
		
		"EC2IamInstanceProfile" : {
		  "Type" : "AWS::IAM::InstanceProfile",
		  "Properties" : {
			"Path" : "/",
			"Roles" : [
			  {
				"Ref" : "EC2IamRole"
			  }
			]
		  }
		},
		
		"EC2IamPolicy" : {
		  "Type" : "AWS::IAM::Policy",
		  "Properties" : {
			"PolicyName" : "EC2IamPolicy",
			"PolicyDocument" : {
			  "Statement" : [
				{
				  "Effect" : "Allow",
				  "Action" : [
					"s3:Get*",
					"s3:List*",
					"s3:Put*"
				  ],
				  "Resource" : [
					"arn:aws:s3:::springboot-demo-bucket*",
					"arn:aws:s3:::activemq-demo-bucket*"
				  ]
				}, {
				  "Effect" : "Allow",
				  "Action" : [
					"cloudformation:*",
					"cloudwatch:*",
					"autoscaling:*",
					"logs:*",
					"ssm:*",
					"ec2:*",
					"mq:*"
				  ],
				  "Resource" : "*"
				}
			  ]
			},
			"Roles" : [
			  {
				"Ref" : "EC2IamRole"
			  }
			]
		  }
		},
		
		"EC2IamRole" : {
		  "Type" : "AWS::IAM::Role",
		  "Properties" : {
			"AssumeRolePolicyDocument": {
			  "Version" : "2012-10-17",
			  "Statement" : [
				{
				  "Effect" : "Allow",
				  "Principal" : {
					"Service" : ["ec2.amazonaws.com"]
				  },
				  "Action" : [
					"sts:AssumeRole"
				  ]
				}
			  ]
			},
			"Path" : "/"
		  }
		},
		
		"ActiveMqBroker": {
		  "Type": "AWS::AmazonMQ::Broker",
		  "Properties": {
			"AutoMinorVersionUpgrade": "false",
			"BrokerName": { "Ref" : "BrokerName" },
			"DeploymentMode": "SINGLE_INSTANCE",
			"EngineType": "ActiveMQ",
			"EngineVersion": "5.15.0",
			"HostInstanceType": "mq.t2.micro",
			"PubliclyAccessible": "false",
			"SecurityGroups":[{"Ref" : "MqSecurityGroup"}],
			"Logs": {
				"General": true,
				"Audit": true
			},
			"Users": [
			  {
				"ConsoleAccess": "true",
				"Password" : { "Ref" : "AmazonMqPassword" },
				"Username" : { "Ref" : "AmazonMqUsername" }
			  }
			],
			"SubnetIds" : [{"Ref":"CustomPublicSubnet"}]
		  }
		},
		
		"CustomVPC" : {
		   "Type" : "AWS::EC2::VPC",
		   "Properties" : {
			  "CidrBlock" : "10.0.0.0/16",
			  "EnableDnsSupport" : "true",
			  "EnableDnsHostnames" : "true",
			  "InstanceTenancy" : "default"
		   }
		},
	  
	    "CustomInternetGateway" : {
		    "Type" : "AWS::EC2::InternetGateway"
	    },
	   
	   "AttachCustomInternetGateway" : {
		   "Type" : "AWS::EC2::VPCGatewayAttachment",
		   "Properties" : {
			  "VpcId" : { "Ref" : "CustomVPC" },
			  "InternetGatewayId" : { "Ref" : "CustomInternetGateway" }
			}
		},
		
		"CustomPublicSubnet" : {
		   "Type" : "AWS::EC2::Subnet",
		   "Properties" : {
			  "VpcId" : { "Ref" : "CustomVPC" },
			  "CidrBlock" : "10.0.11.0/24",
			  "AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
			  "MapPublicIpOnLaunch" : true
		   }
		},
		
		"CustomPublicSubnet2" : {
		   "Type" : "AWS::EC2::Subnet",
		   "Properties" : {
			  "VpcId" : { "Ref" : "CustomVPC" },
			  "CidrBlock" : "10.0.12.0/24",
			  "AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
			  "MapPublicIpOnLaunch" : true
		   }
		},
		
		"PublicRoute" : {
		   "Type" : "AWS::EC2::Route",
		   "DependsOn" : "AttachCustomInternetGateway",
		   "Properties" : {
			  "RouteTableId" : { "Ref" : "PublicRouteTable" },
			  "DestinationCidrBlock" : "0.0.0.0/0",
			  "GatewayId" : { "Ref" : "CustomInternetGateway" }
		   }
		},
		
		"PublicRouteTable" : {
		   "Type" : "AWS::EC2::RouteTable",
		   "Properties" : {
			  "VpcId" : { "Ref" : "CustomVPC" }
		   }
		},
		
		"PublicSubnetRouteTableAssociation" : {
		   "Type" : "AWS::EC2::SubnetRouteTableAssociation",
		   "Properties" : {
			  "SubnetId" : { "Ref" : "CustomPublicSubnet" },
			  "RouteTableId" : { "Ref" : "PublicRouteTable" }
		   }
		},
		
		"PublicSubnetRouteTableAssociation2" : {
		   "Type" : "AWS::EC2::SubnetRouteTableAssociation",
		   "Properties" : {
			  "SubnetId" : { "Ref" : "CustomPublicSubnet2" },
			  "RouteTableId" : { "Ref" : "PublicRouteTable" }
		   }
		},
		
		"S3Endpoint": {
		  "Type": "AWS::EC2::VPCEndpoint",
		  "Properties": {
			 "RouteTableIds": [{"Ref": "PublicRouteTable"}],
			 "ServiceName": {"Fn::Sub": "com.amazonaws.${AWS::Region}.s3"},
			 "VpcId": {"Ref": "CustomVPC"}
		  }
	   }
	}
	
}